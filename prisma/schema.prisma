// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  fullname        String
  mobile          Int          @unique
  gender          String
  nationalCode    String
  birthday        String
  city            String
  image           String
  fatherName      String
  bloodCategory   String
  specialIllness  String
  emergencyMobile String
  otp             String
  role            Role         @default(USER)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  team            Team?
  Payments        Payments?
  groupsId        Int?
  UserGroups      UserGroups[]

  @@map("user")
}

model Team {
  id            Int    @id @default(autoincrement())
  user          User   @relation(fields: [userId], references: [id])
  userId        Int    @unique
  fullname      String
  natinalCode   String
  image         String
  fatherName    String
  bloodCategory String
}

model Clients {
  id             Int       @id @default(autoincrement())
  company_name   String
  company_logo   String
  province       String
  city           String
  Address        String
  Phones         String
  Socials        String[]
  website        String
  cto_name       String
  cto_nationCode String
  cto_birthday   String
  cto_fatherName String
  cto_phone      String
  email          String    @unique
  username       String
  password       String
  Packages       Packages? @relation(fields: [packagesId], references: [id])
  packagesId     Int?
  Groups         Groups[]
}

model Payments {
  id     Int    @id @default(autoincrement())
  value  String
  status String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Packages {
  id             Int       @id @default(autoincrement())
  name           String
  price          String
  expirationTime String
  Clients        Clients[]
}

model Groups {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  status      GroupStatus  @default(ACTIVE)
  image       String
  groupCodes  String       @unique
  client      Clients      @relation(fields: [clientId], references: [id])
  clientId    Int
  createdAt   DateTime     @default(now())
  UserGroups  UserGroups[]
  Program     Program[]
}

model UserGroups {
  id        Int      @id @default(autoincrement())
  groups    Groups   @relation(fields: [groupsId], references: [id])
  groupsId  Int
  users     User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Program {
  id          Int         @id @default(autoincrement())
  name        String
  groups      Groups      @relation(fields: [groupsId], references: [id])
  groupsId    Int
  status      GroupStatus
  time        DateTime
  departure   String
  destination String
  price       String
}

// Controll roles
enum Role {
  CLIENT
  ADMIN
  USER
}

enum GroupStatus {
  ACTIVE
  NOTACTIVE
  SUSPENDED
}
